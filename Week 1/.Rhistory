diff(AirPassengers,1)
diff(AirPassengers,2)
# Second order differencing
diff(diff(AirPassengers,1),1)
diff(diff(diff(AirPassengers,1),1),1)
plot(bricksq)
library(fpp)
library(fma)
library(fpp)
library(fma)
plot(bricksq)
kpss.test(bricksq)
Acf(bricksq)
Acf(bricksq,100)
plot(bricksq)
bricksq
plot(AirPassengers)
# Second order differencing
plot(diff(diff(AirPassengers,1),1))
# Second order differencing
plot(diff(diff(log(AirPassengers),1),1))
# Second order differencing
plot(log(diff(diff(AirPassengers,1),1)))
# Second order differencing
plot(diff(diff(AirPassengers,1),1))
)
# Second order differencing
plot(log(diff(diff(AirPassengers,1),1)))
# Second order differencing
plot(diff(diff(log(AirPassengers),1),1))
# Bricksq time series
plot(bricksq)
# Variance stabilized
plot(log(bricksq))
# Bricksq time series
plot(bricksq)
# Variance stabilized
plot(log(bricksq))
# Seasonal differencing of bricksq series
plot(diff(log(bricksq),4))
kpss.test(diff(log(bricksq),4))
# Seasonal differencing of bricksq series
plot(log(diff(log(bricksq),4)))
# Seasonal differencing of bricksq series
plot(diff(log(bricksq),4))
# Variance stabilized
plot(log(bricksq))
# Variance stabilized
plot(log(log(bricksq)))
# Variance stabilized
plot(log(log(log(bricksq))))
############################# AirPassengers time series ################
plot(AirPassengers)
plot(log(AirPassengers))
plot(log(AirPassengers))
plot(diff(log(AirPassengers),12))
plot(diff(log(AirPassengers),14))
plot(log(AirPassengers))
############################ Bricksq time series #######################
plot(bricksq)
############################# AirPassengers time series ################
plot(AirPassengers)
plot(diff(log(AirPassengers),12))
plot(diff(log(AirPassengers),14))
############################# AirPassengers time series ################
plot(AirPassengers)
kpss.test(AirPassengers)
plot(log(AirPassengers))
plot(diff(log(AirPassengers),10))
plot(diff(log(AirPassengers),12))
plot(diff(log(AirPassengers),12))
plot(diff(log(AirPassengers),12))
kpss(diff(log(AirPassengers),12))
kpss.test(diff(log(AirPassengers),12))
kpss.test(diff(log(AirPassengers),14))
kpss.test(diff(log(AirPassengers),14))
kpss.test(diff(log(AirPassengers),12))
plot(diff(diff(log(AirPassengers),12))) # Non Seasonal differencing to stabilize mean
plot(log(diff(diff(log(AirPassengers),12)))) # Non Seasonal differencing to stabilize mean
plot(diff(diff(log(AirPassengers),12),1)) # Non Seasonal differencing to stabilize mean
kpss.(plot(diff(log(AirPassengers),12),1))
kpss.test(plot(diff(log(AirPassengers),12),1))
kpss.test(diff(log(AirPassengers),12),1)))
kpss.test(diff(log(AirPassengers),12),1)
kpss.test(diff(diff(log(AirPassengers),12),1))
acf(AirPassengers)
length(AirPassengers)
acf(AirPassengers,144)
acf(diff(diff(log(AirPassengers),12),1))
acf(diff(diff(log(AirPassengers),12),1),144)
plot(ibmclose)
acf(diff(diff(log(AirPassengers),12),1),144)
acf(diff(diff(log(AirPassengers),12),2),144)
acf(diff(diff(log(AirPassengers),12),2),144)
acf(diff(diff(log(AirPassengers),12),3),144)
acf(diff(diff(log(AirPassengers),12),11),144)
acf(diff(diff(log(AirPassengers),12),1),144)
plot(ibmclose)
plot(log(ibmclose))
plot(ibmclose)
plot(diff(ibmclose,1))
length(ibmclose)
acf(diff(ibmclose,1),369)
kpss.test(diff(ibmclose,1))
plot(diff(ibmclose,1))
kpss.test(diff(log(ibmclose),1))
# White noise test
Box.test(ibmclose, lag = 1, type="Ljung")
acf(ibmclose)
# White noise test
Box.test(diff(ibmclose,1), lag = 1, type="Ljung")
# White noise test
Box.test(ibmclose, lag = 12, type="Ljung")
# White noise test
Box.test(diff(ibmclose,1), lag = 12, type="Ljung")
# White noise test
Box.test(diff(ibmclose,1), lag = 12, type="Ljung") #lag is the number of labs being used for the test
trainingSet <- window(ts(AirPassengers),1,100)
testSet <- window(ts(AirPassengers),101,144)
# Fitting an ARIMA model
plot(AirPassengers)
acf(AirPassengers)
acf(AirPassengers,144)
summary(fit1)
trainingSet <- window(ts(AirPassengers),1,100)
testSet <- window(ts(AirPassengers),101,144)
fit1 <- Arima(trainingSet, order=c(1,1,1))
summary(fit1)
# Fitting an ARIMA model
plot(AirPassengers)
(*AirPassengers)
trainingSet
AirPassengers
trs <- window(AirPassengers, c(1949,1), c(1957,12))
trs
tes <- window(AirPassengers, c(1958,1), c(1960,12))
fit1 <- Arima(trs, order=c(1,1,1))
summary(fit1)
trs
plot(trs)
plot(log(trs))
plot(log(trs))
plot(diff(log(trs),12))
# Testing for stationarity
kpss.test(diff(log(trs),12))
acf(AirPassengers,144)
Acf(AirPassengers,144)
acf(AirPassengers,144)
acf(AirPassengers,144)
Acf(AirPassengers,144)
acf(AirPassengers,144)
# Fitting an ARIMA model
plot(AirPassengers)
Acf(AirPassengers,144)
acf(diff(log(trs),12))
pacf(diff(log(trs),12))
Acf(diff(log(trs),12))
Pacf(diff(log(trs),12))
Acf(diff(log(trs),12))
Pacf(diff(log(trs),12))
Pacf(AirPassengers,144)
Acf(AirPassengers,144)
Pacf(AirPassengers,144)
# Checking which model to fit looking at autocorrelation values
Acf(diff(log(trs),12))
# Checking which model to fit looking at autocorrelation values
Acf(diff(log(trs),12),144)
Pacf(diff(log(trs),12),144)
# Fitting an ARIMA model
plot(AirPassengers)
# Checking which model to fit looking at autocorrelation values
Acf(diff(log(trs),12),144)
fit1 <- Arima(log(trs), order=c(2,0,0), seasonal = c(0,1,1))
fit2 <- Arima(log(trs), order=c(2,0,1), seasonal = c(0,1,1))
fit3 <- Arima(log(trs), order=c(2,0,0), seasonal = c(0,1,2))
summary(fit1)
summary(fit2)
summary(fit3)
fit1$residuals
residuals(fit)
residuals(fit1)
Box.test(fit1$residuals, lag = 24, type="Ljung")
Acf(fit1$residuals)
Acf(fit1$residuals,144)
forecast(fit1)
plot(fit1)
plot(forcast(fit1))
plot(forecast(fit1))
Pacf(diff(log(trs),12),144)
# add note here ...
Acf(fit1$residuals,144)
# a)
plot(condmilk)
library(fpp)
# a)
plot(condmilk)
condmilk
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx("ng.xlsx",sheetIndex=1, colIndex=7:15,rowIndex=18:23)
install.packages("xlsx")
library(xlsx)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
url <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, "./ng.xlsx", method="curl")
dat <- xlsx::read.xlsx(file = "getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(xmllite)
library(XML)
install.packages("XML")
library(XML)
doc <- xmlTreeParse(url,useInternal=TRUE)
doc <- xmlTreeParse(url,useInternal=TRUE)
url <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url,useInternal=TRUE)
rootNode <- xmlRoot(doc)
rootNode
xpathSApply(rootNode,"//name",xmlValue)
rests <- xpathSApply(rootNode,"//row/[zipcode == 21231]",xmlValue)
rests <- xpathSApply(rootNode,"//row[zipcode == 21231]",xmlValue)
rests <- xpathSApply(rootNode,"//row[zipcode > 21231]",xmlValue)
rests
rests <- xpathSApply(rootNode,"//row[zipcode = 21231]",xmlValue)
rests
length(rests)
download.file(url,"dt.csv")
#Question 5
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url,"dt.csv")
getwd()
setwd("~/Documents/Online courses/Data Science - Coursera/Coursera - Getting and Cleaning Data/Week 1")
q
getwd()
#Question 5
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url,"dt.csv")
dt <- fread("dt.csv")
#Question 5
libbrary(data.table)
#Question 5
library(data.table)
#Question 5
install.packages("data.table")
pwgtp15
# fastest
system.time(DT[,mean(pwgtp15),by=SEX])
# fastest
system.time(dt[,mean(pwgtp15),by=SEX])
dt
dt <- fread("dt.csv")
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url,"dt.csv")
dt <- fread("dt.csv")
# fastest
system.time(dt[,mean(pwgtp15),by=SEX])
libbrary(swirl)
library(swirl)
install.packages("swirl")
package.version("swirl")
library(swirl)
ls()
ls()
install_from_swirl("Getting and Cleaning Data")
